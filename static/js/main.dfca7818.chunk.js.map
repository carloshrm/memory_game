{"version":3,"sources":["components/Card.js","components/GameOver.js","components/GameBoard.js","App.js","reportWebVitals.js","index.js"],"names":["Card","name","image","id","clickHandler","onClick","className","src","alt","GameOver","scores","result","didLose","current","highest","GameBoard","children","total","App","useState","rawData","setRawData","animeList","setAnimeList","playerScore","setPlayerScore","difficulty","setDifficulty","gameOver","setGameOver","checkSeason","currentTime","Date","seasonByName","Array","fill","getFullYear","getMonth","fetchFromAPI","a","year","season","fetch","fetchAnime","json","animeData","setData","response","filteredData","setupList","anime","localStorage","setItem","JSON","stringify","now","shuffleArray","slice","unfilteredData","reduce","array","entry","score","r18","push","title","coverImage","image_url","clicked","updatedList","i","length","randomInd","Math","floor","random","useEffect","getItem","parse","htmlFor","onChange","e","target","value","freshList","map","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfca7818.chunk.js","sourcesContent":["import \"../styles/Card.css\";\r\n\r\nfunction Card({ name, image, id, clickHandler }) {\r\n  return (\r\n    <div onClick={() => clickHandler(id)} className=\"ind_card\">\r\n      <img src={image} alt=\"\" />\r\n      <p>{name}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import \"../styles/Over.css\";\r\n\r\nfunction GameOver({ scores, didLose }) {\r\n  let result = didLose ? \"You lost...\" : \"You won!!\";\r\n  return (\r\n    <div id=\"game_over\">\r\n      <h2>{result}</h2>\r\n      <h3>You scored: {scores.current}</h3>\r\n      <h3>Highest Score: {scores.highest}</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameOver;\r\n","import \"../styles/Board.css\";\r\n\r\nfunction GameBoard({ children, scores, total }) {\r\n  return (\r\n    <>\r\n      <h3 className=\"game_header\">\r\n        You have guessed: {scores.current} so far. <p>{total} cards total.</p>\r\n        <p>Highest Score: {scores.highest}</p>\r\n      </h3>\r\n      <div className=\"game_board\">{children}</div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GameBoard;\r\n","import { useEffect, useState } from \"react\";\nimport \"./styles/App.css\";\nimport Card from \"./components/Card\";\nimport GameOver from \"./components/GameOver\";\nimport GameBoard from \"./components/GameBoard\";\n\nfunction App() {\n  const [rawData, setRawData] = useState([]);\n  const [animeList, setAnimeList] = useState([]);\n  const [playerScore, setPlayerScore] = useState({ current: 0, highest: 0 });\n  const [difficulty, setDifficulty] = useState(10);\n  const [gameOver, setGameOver] = useState(false);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"animeList\") === null) {\n      setData();\n    } else {\n      setAnimeList(JSON.parse(localStorage.getItem(\"animeList\")));\n      setRawData(JSON.parse(localStorage.getItem(\"rawData\")));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"animeList\", JSON.stringify(animeList));\n  }, [animeList]);\n\n  function checkSeason() {\n    const currentTime = new Date();\n    let seasonByName = Array(12)\n      .fill(\"winter\", 0, 3)\n      .fill(\"spring\", 3, 6)\n      .fill(\"summer\", 6, 9)\n      .fill(\"fall\", 9, 12);\n    return [currentTime.getFullYear(), seasonByName[currentTime.getMonth() - 1]];\n  }\n  async function fetchFromAPI() {\n    let [year, season] = checkSeason();\n    const fetchAnime = await fetch(`https://api.jikan.moe/v3/season/${year}/${season}`);\n    const animeData = await fetchAnime.json();\n    return animeData;\n  }\n\n  async function setData() {\n    const response = await fetchFromAPI();\n    const filteredData = setupList(response.anime);\n    setRawData(response.anime);\n    localStorage.setItem(\"rawData\", JSON.stringify(response.anime));\n    localStorage.setItem(\"dataAge\", JSON.stringify(Date.now()));\n    shuffleArray(filteredData);\n    setAnimeList(filteredData.slice(0, difficulty));\n  }\n\n  function setupList(unfilteredData) {\n    let newList = unfilteredData.reduce((array, entry) => {\n      if (entry.score > 5 && entry.r18 === false) {\n        array.push({\n          title: entry.title,\n          coverImage: entry.image_url,\n          clicked: false,\n        });\n      }\n      return array;\n    }, []);\n    return newList;\n  }\n\n  function clickHandler(id) {\n    if (animeList[id].clicked) {\n      setGameOver(true);\n    } else {\n      setPlayerScore({\n        current: playerScore.current + 1,\n        highest:\n          playerScore.current + 1 > playerScore.highest\n            ? playerScore.current + 1\n            : playerScore.highest,\n      });\n      let updatedList = [...animeList];\n      updatedList[id].clicked = true;\n      shuffleArray(updatedList);\n      setAnimeList(updatedList);\n    }\n  }\n\n  function shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      let randomInd = Math.floor(Math.random() * (i + 1));\n      let current = array[i];\n      array[i] = array[randomInd];\n      array[randomInd] = current;\n    }\n  }\n\n  function resetGame() {\n    setPlayerScore({ current: 0, highest: playerScore.highest });\n    setGameOver(false);\n    if (\n      localStorage.getItem(\"rawData\") === [] ||\n      Date.now() - localStorage.getItem(\"dataAge\") > 86400 * 1000\n    ) {\n      setData();\n    } else {\n      let freshList = setupList(rawData);\n      shuffleArray(freshList);\n      setAnimeList(freshList.slice(0, difficulty));\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h2>Anime Memory Game!</h2>\n        <div>\n          <label htmlFor=\"diff\">Power Level:</label>\n          <select name=\"diff\" onChange={(e) => setDifficulty(e.target.value)}>\n            <option value=\"10\">Normie</option>\n            <option value=\"12\">Seen AOT</option>\n            <option value=\"16\">Seasonal</option>\n            <option value=\"20\">８０００以上だ！</option>\n          </select>\n          <button onClick={resetGame}>Reset/Refresh</button>\n        </div>\n      </header>\n      {gameOver || playerScore.current === animeList.length ? (\n        <GameOver scores={playerScore} didLose={gameOver} />\n      ) : (\n        <GameBoard scores={playerScore} total={animeList.length}>\n          {animeList.map((entry, i) => (\n            <Card\n              key={i}\n              id={i}\n              name={entry.title}\n              image={entry.coverImage}\n              clickHandler={clickHandler}\n            />\n          ))}\n        </GameBoard>\n      )}\n      <footer>\n        <p>Made By Carlos Moraes, 2021.</p>\n        <a href=\"https://github.com/carloshrm/memory_game\">Source on Github.</a>\n        <p>\n          Seasonal anime data from MyAnimeList.net through{\" \"}\n          <a href=\"https://jikan.moe\">Jikan API.</a>{\" \"}\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}